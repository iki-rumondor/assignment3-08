// Code generated by mockery v2.34.2. DO NOT EDIT.

package mocks

import (
	domain "github.com/iki-rumondor/assignment3-GLNG-KS-08-08/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// ConditionRepository is an autogenerated mock type for the ConditionRepository type
type ConditionRepository struct {
	mock.Mock
}

// Save provides a mock function with given fields: _a0
func (_m *ConditionRepository) Save(_a0 *domain.Condition) (*domain.Condition, error) {
	ret := _m.Called(_a0)

	var r0 *domain.Condition
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.Condition) (*domain.Condition, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*domain.Condition) *domain.Condition); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Condition)
		}
	}

	if rf, ok := ret.Get(1).(func(*domain.Condition) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewConditionRepository creates a new instance of ConditionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConditionRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ConditionRepository {
	mock := &ConditionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
